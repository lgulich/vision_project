function [d_robot_pose_W, kalman_state_curr] = estimateDRobotPose(d_robot_pose_vo, d_robot_pose_wo, kalman_state_prev);
% Estimate the current robot pose difference
%
%   :param d_robot_pose_vo: vector, robot pose of the last timestep based
%   on visual odometry
%   :param d_robot_pose_wo: vector, robot pose of the last timestep based
%   on wheel odometry
%   :param kalman_state_prev: struct, the previous kalman state, containing the
%   previous state vector and variance matrix
%
%   :return d_robot_pose_W: vector, the estimated world robot pose difference
%   :return kalman_state_curr: the current kalman state, containing the
%   previous state vector and variance matrix
%
% Fuzes the estimates of the robot pose difference from visual and wheel
% odometry and estimates the scale drift factor

% estimate the current kalman state
%% define quantities
X = kalman_state_prev.X;
x = X(1);
z = X(2);
gamma = X(3);
beta = X(4);

P = kalman_state_prev.P;

Q = diag([0.1; 0.1; 0.1; 0.1].^2);
R = diag([0.3, 0.3, 0.2, 0.1, 0.1, 0.1].^2);

%% prior update
A = eye(4);
L = eye(4);

X_p = A*x;
P_p = A*P*A.' + L*Q*L.';

%% measurement update

H = [beta 0 0 x; ...
    0 beta 0 z; ...
    0 0 1 0; ...
    1 0 0 0; ...
    0 1 0 0; ...
    0 0 1 0];
M = diag([beta beta 1 1 1 1]);







% assemble the world robot pose
d_robot_pose_W = (d_robot_pose_vo + d_robot_pose_wo)/2;

end

